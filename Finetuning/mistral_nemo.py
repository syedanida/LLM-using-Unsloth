# -*- coding: utf-8 -*-
"""Mistral NeMo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1avCkNPxOOxv30L0H_yUaYtKI6zL1lX84

## Fine-tune Mistral NeMo (12B)
"""

# Install necessary packages
!pip install unsloth bitsandbytes accelerate xformers==0.0.29.post3 peft trl==0.15.2 triton cut_cross_entropy unsloth_zoo
!pip install sentencepiece protobuf datasets huggingface_hub hf_transfer
!pip install --no-deps unsloth

from unsloth import FastLanguageModel
from datasets import load_dataset
from transformers import TrainingArguments
from trl import SFTTrainer
import torch

# Parameters for the model and LoRA setup
max_seq_length = 2048
dtype = None  # Auto-detect dtype
load_in_4bit = True

# Load the pre-trained Mistral NeMo (12B) model
import os
model_name = "facebook/opt-125m"
# 1. Setting Hugging Face token as environment variable
os.environ["HUGGING_FACE_HUB_TOKEN"] = "YOUR_HUGGING_FACE_TOKEN"
# Or
# 2. Passing token directly to the function
model, tokenizer = FastLanguageModel.from_pretrained(
    model_name=model_name,
    max_seq_length=max_seq_length,
    dtype=dtype,
    load_in_4bit=load_in_4bit,
    token="YOUR_HUGGING_FACE_TOKEN"  # Replace with your token
)

# Add LoRA for efficient fine-tuning
model = FastLanguageModel.get_peft_model(
    model,
    r=16,  # LoRA rank, tune this based on hardware
    target_modules=["q_proj", "k_proj", "v_proj", "o_proj", "gate_proj", "up_proj", "down_proj"],
    lora_alpha=16,
    lora_dropout=0,  # Dropout rate
    bias="none",  # Optimized setting
    use_gradient_checkpointing="unsloth",  # Enable for long context lengths
    random_state=3407
)

from datasets import load_dataset

# Load the Python dataset from CodeSearchNet
dataset = load_dataset("code_search_net", "python")

# Formatting function
def formatting_func(example):
    doc = example["func_documentation_string"]
    code = example["func_code_string"]
    return f'"""{doc}"""\n{code}'

# Apply the formatting only to the train split
formatted_train = dataset["train"].map(formatting_prompts_func, batched=True)

from unsloth.trainer import SFTTrainer  # Import SFTTrainer from unsloth.trainer

trainer = SFTTrainer(
    model=model,
    tokenizer=tokenizer,
    train_dataset=dataset["train"],
    formatting_func=formatting_func,
    dataset_text_field="func_code_string",  # Technically this is optional if formatting_func is set
    max_seq_length=max_seq_length,
    dataset_num_proc=2,
    packing=False,
    args=TrainingArguments(
        per_device_train_batch_size=2,
        gradient_accumulation_steps=4,
        warmup_steps=5,
        max_steps=1000,
        learning_rate=2e-4,
        fp16=True,
        logging_steps=1,
        optim="adamw_8bit",
        weight_decay=0.01,
        lr_scheduler_type="linear",
        seed=3407,
        output_dir="outputs",
        report_to="none",
    ),
)

# Start the fine-tuning process
trainer.train()

# Inference - Test the fine-tuned model on a coding prompt
FastLanguageModel.for_inference(model)

# Test prompt to generate Python code from model
test_input = "### Code:\n# Write a function that returns the Fibonacci sequence\n### Response: "
inputs = tokenizer([test_input], return_tensors="pt").to("cuda")

outputs = model.generate(**inputs, max_new_tokens=64, use_cache=True)
generated_code = tokenizer.batch_decode(outputs, skip_special_tokens=True)

print("Generated Code:\n", generated_code[0])

# Save the fine-tuned model and tokenizer
model.save_pretrained("lora_mistral_neMo_12B")
tokenizer.save_pretrained("lora_mistral_neMo_12B")